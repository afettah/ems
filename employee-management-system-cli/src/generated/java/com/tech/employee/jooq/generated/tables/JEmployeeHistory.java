/*
 * This file is generated by jOOQ.
 */
package com.tech.employee.jooq.generated.tables;


import com.tech.employee.jooq.generated.JEms;
import com.tech.employee.jooq.generated.Keys;
import com.tech.employee.jooq.generated.tables.records.JEmployeeHistoryRecord;
import com.tech.shared.infrastructure.InstantConverter;

import java.time.Instant;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JEmployeeHistory extends TableImpl<JEmployeeHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ems.employee_history</code>
     */
    public static final JEmployeeHistory EMPLOYEE_HISTORY = new JEmployeeHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JEmployeeHistoryRecord> getRecordType() {
        return JEmployeeHistoryRecord.class;
    }

    /**
     * The column <code>ems.employee_history.id</code>.
     */
    public final TableField<JEmployeeHistoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ems.employee_history.username</code>.
     */
    public final TableField<JEmployeeHistoryRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ems.employee_history.action</code>.
     */
    public final TableField<JEmployeeHistoryRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ems.employee_history.changes</code>.
     */
    public final TableField<JEmployeeHistoryRecord, JSONB> CHANGES = createField(DSL.name("changes"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>ems.employee_history.created_at</code>.
     */
    public final TableField<JEmployeeHistoryRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new InstantConverter());

    private JEmployeeHistory(Name alias, Table<JEmployeeHistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JEmployeeHistory(Name alias, Table<JEmployeeHistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ems.employee_history</code> table reference
     */
    public JEmployeeHistory(String alias) {
        this(DSL.name(alias), EMPLOYEE_HISTORY);
    }

    /**
     * Create an aliased <code>ems.employee_history</code> table reference
     */
    public JEmployeeHistory(Name alias) {
        this(alias, EMPLOYEE_HISTORY);
    }

    /**
     * Create a <code>ems.employee_history</code> table reference
     */
    public JEmployeeHistory() {
        this(DSL.name("employee_history"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JEms.EMS;
    }

    @Override
    public Identity<JEmployeeHistoryRecord, Integer> getIdentity() {
        return (Identity<JEmployeeHistoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JEmployeeHistoryRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_HISTORY_PKEY;
    }

    @Override
    public JEmployeeHistory as(String alias) {
        return new JEmployeeHistory(DSL.name(alias), this);
    }

    @Override
    public JEmployeeHistory as(Name alias) {
        return new JEmployeeHistory(alias, this);
    }

    @Override
    public JEmployeeHistory as(Table<?> alias) {
        return new JEmployeeHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JEmployeeHistory rename(String name) {
        return new JEmployeeHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JEmployeeHistory rename(Name name) {
        return new JEmployeeHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JEmployeeHistory rename(Table<?> name) {
        return new JEmployeeHistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeHistory where(Condition condition) {
        return new JEmployeeHistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeHistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeHistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeHistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeHistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeHistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeHistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeHistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeHistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeHistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
