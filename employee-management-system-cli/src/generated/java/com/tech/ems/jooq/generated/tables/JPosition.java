/*
 * This file is generated by jOOQ.
 */
package com.tech.ems.jooq.generated.tables;


import com.tech.ems.jooq.generated.JEms;
import com.tech.ems.jooq.generated.Keys;
import com.tech.ems.jooq.generated.tables.JEmployee.JEmployeePath;
import com.tech.ems.jooq.generated.tables.records.JPositionRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JPosition extends TableImpl<JPositionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ems.position</code>
     */
    public static final JPosition POSITION = new JPosition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPositionRecord> getRecordType() {
        return JPositionRecord.class;
    }

    /**
     * The column <code>ems.position.id</code>.
     */
    public final TableField<JPositionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ems.position.code</code>.
     */
    public final TableField<JPositionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ems.position.name</code>.
     */
    public final TableField<JPositionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private JPosition(Name alias, Table<JPositionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPosition(Name alias, Table<JPositionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ems.position</code> table reference
     */
    public JPosition(String alias) {
        this(DSL.name(alias), POSITION);
    }

    /**
     * Create an aliased <code>ems.position</code> table reference
     */
    public JPosition(Name alias) {
        this(alias, POSITION);
    }

    /**
     * Create a <code>ems.position</code> table reference
     */
    public JPosition() {
        this(DSL.name("position"), null);
    }

    public <O extends Record> JPosition(Table<O> path, ForeignKey<O, JPositionRecord> childPath, InverseForeignKey<O, JPositionRecord> parentPath) {
        super(path, childPath, parentPath, POSITION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JPositionPath extends JPosition implements Path<JPositionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JPositionPath(Table<O> path, ForeignKey<O, JPositionRecord> childPath, InverseForeignKey<O, JPositionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JPositionPath(Name alias, Table<JPositionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JPositionPath as(String alias) {
            return new JPositionPath(DSL.name(alias), this);
        }

        @Override
        public JPositionPath as(Name alias) {
            return new JPositionPath(alias, this);
        }

        @Override
        public JPositionPath as(Table<?> alias) {
            return new JPositionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JEms.EMS;
    }

    @Override
    public Identity<JPositionRecord, Integer> getIdentity() {
        return (Identity<JPositionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JPositionRecord> getPrimaryKey() {
        return Keys.POSITION_PKEY;
    }

    @Override
    public List<UniqueKey<JPositionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.POSITION_CODE_UNIQUE);
    }

    private transient JEmployeePath _employee;

    /**
     * Get the implicit to-many join path to the <code>ems.employee</code> table
     */
    public JEmployeePath employee() {
        if (_employee == null)
            _employee = new JEmployeePath(this, null, Keys.EMPLOYEE__EMPLOYEE_POSITION_CODE_FKEY.getInverseKey());

        return _employee;
    }

    @Override
    public JPosition as(String alias) {
        return new JPosition(DSL.name(alias), this);
    }

    @Override
    public JPosition as(Name alias) {
        return new JPosition(alias, this);
    }

    @Override
    public JPosition as(Table<?> alias) {
        return new JPosition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPosition rename(String name) {
        return new JPosition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPosition rename(Name name) {
        return new JPosition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPosition rename(Table<?> name) {
        return new JPosition(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPosition where(Condition condition) {
        return new JPosition(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPosition where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPosition where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPosition where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPosition where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPosition where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPosition where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPosition where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPosition whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPosition whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
