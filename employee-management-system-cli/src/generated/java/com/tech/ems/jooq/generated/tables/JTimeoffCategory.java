/*
 * This file is generated by jOOQ.
 */
package com.tech.ems.jooq.generated.tables;


import com.tech.ems.jooq.generated.JEms;
import com.tech.ems.jooq.generated.Keys;
import com.tech.ems.jooq.generated.tables.JEmployeeTimeoff.JEmployeeTimeoffPath;
import com.tech.ems.jooq.generated.tables.records.JTimeoffCategoryRecord;
import com.tech.ems.shared.infrastructure.InstantConverter;

import java.time.Instant;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JTimeoffCategory extends TableImpl<JTimeoffCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ems.timeoff_category</code>
     */
    public static final JTimeoffCategory TIMEOFF_CATEGORY = new JTimeoffCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JTimeoffCategoryRecord> getRecordType() {
        return JTimeoffCategoryRecord.class;
    }

    /**
     * The column <code>ems.timeoff_category.id</code>.
     */
    public final TableField<JTimeoffCategoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ems.timeoff_category.name</code>.
     */
    public final TableField<JTimeoffCategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ems.timeoff_category.description</code>.
     */
    public final TableField<JTimeoffCategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ems.timeoff_category.paid</code>.
     */
    public final TableField<JTimeoffCategoryRecord, Boolean> PAID = createField(DSL.name("paid"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>ems.timeoff_category.auto_cancellable</code>.
     */
    public final TableField<JTimeoffCategoryRecord, Boolean> AUTO_CANCELLABLE = createField(DSL.name("auto_cancellable"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>ems.timeoff_category.created_at</code>.
     */
    public final TableField<JTimeoffCategoryRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>ems.timeoff_category.updated_at</code>.
     */
    public final TableField<JTimeoffCategoryRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", new InstantConverter());

    private JTimeoffCategory(Name alias, Table<JTimeoffCategoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JTimeoffCategory(Name alias, Table<JTimeoffCategoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ems.timeoff_category</code> table reference
     */
    public JTimeoffCategory(String alias) {
        this(DSL.name(alias), TIMEOFF_CATEGORY);
    }

    /**
     * Create an aliased <code>ems.timeoff_category</code> table reference
     */
    public JTimeoffCategory(Name alias) {
        this(alias, TIMEOFF_CATEGORY);
    }

    /**
     * Create a <code>ems.timeoff_category</code> table reference
     */
    public JTimeoffCategory() {
        this(DSL.name("timeoff_category"), null);
    }

    public <O extends Record> JTimeoffCategory(Table<O> path, ForeignKey<O, JTimeoffCategoryRecord> childPath, InverseForeignKey<O, JTimeoffCategoryRecord> parentPath) {
        super(path, childPath, parentPath, TIMEOFF_CATEGORY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JTimeoffCategoryPath extends JTimeoffCategory implements Path<JTimeoffCategoryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JTimeoffCategoryPath(Table<O> path, ForeignKey<O, JTimeoffCategoryRecord> childPath, InverseForeignKey<O, JTimeoffCategoryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JTimeoffCategoryPath(Name alias, Table<JTimeoffCategoryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JTimeoffCategoryPath as(String alias) {
            return new JTimeoffCategoryPath(DSL.name(alias), this);
        }

        @Override
        public JTimeoffCategoryPath as(Name alias) {
            return new JTimeoffCategoryPath(alias, this);
        }

        @Override
        public JTimeoffCategoryPath as(Table<?> alias) {
            return new JTimeoffCategoryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JEms.EMS;
    }

    @Override
    public UniqueKey<JTimeoffCategoryRecord> getPrimaryKey() {
        return Keys.TIMEOFF_CATEGORY_PKEY;
    }

    private transient JEmployeeTimeoffPath _employeeTimeoff;

    /**
     * Get the implicit to-many join path to the
     * <code>ems.employee_timeoff</code> table
     */
    public JEmployeeTimeoffPath employeeTimeoff() {
        if (_employeeTimeoff == null)
            _employeeTimeoff = new JEmployeeTimeoffPath(this, null, Keys.EMPLOYEE_TIMEOFF__EMPLOYEE_TIMEOFF_CATEGORY_FKEY.getInverseKey());

        return _employeeTimeoff;
    }

    @Override
    public JTimeoffCategory as(String alias) {
        return new JTimeoffCategory(DSL.name(alias), this);
    }

    @Override
    public JTimeoffCategory as(Name alias) {
        return new JTimeoffCategory(alias, this);
    }

    @Override
    public JTimeoffCategory as(Table<?> alias) {
        return new JTimeoffCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTimeoffCategory rename(String name) {
        return new JTimeoffCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTimeoffCategory rename(Name name) {
        return new JTimeoffCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTimeoffCategory rename(Table<?> name) {
        return new JTimeoffCategory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeoffCategory where(Condition condition) {
        return new JTimeoffCategory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeoffCategory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeoffCategory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeoffCategory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeoffCategory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeoffCategory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeoffCategory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeoffCategory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeoffCategory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeoffCategory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
