/*
 * This file is generated by jOOQ.
 */
package com.tech.ems.jooq.generated.tables;


import com.tech.ems.jooq.generated.JEms;
import com.tech.ems.jooq.generated.Keys;
import com.tech.ems.jooq.generated.tables.JEmployee.JEmployeePath;
import com.tech.ems.jooq.generated.tables.JTimeoffCategory.JTimeoffCategoryPath;
import com.tech.ems.jooq.generated.tables.records.JEmployeeTimeoffRecord;
import com.tech.ems.shared.infrastructure.InstantConverter;

import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JEmployeeTimeoff extends TableImpl<JEmployeeTimeoffRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ems.employee_timeoff</code>
     */
    public static final JEmployeeTimeoff EMPLOYEE_TIMEOFF = new JEmployeeTimeoff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JEmployeeTimeoffRecord> getRecordType() {
        return JEmployeeTimeoffRecord.class;
    }

    /**
     * The column <code>ems.employee_timeoff.id</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ems.employee_timeoff.employee_id</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, UUID> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ems.employee_timeoff.category_id</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ems.employee_timeoff.start_date</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>ems.employee_timeoff.end_date</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>ems.employee_timeoff.status</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ems.employee_timeoff.comment</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ems.employee_timeoff.created_at</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>ems.employee_timeoff.updated_at</code>.
     */
    public final TableField<JEmployeeTimeoffRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", new InstantConverter());

    private JEmployeeTimeoff(Name alias, Table<JEmployeeTimeoffRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JEmployeeTimeoff(Name alias, Table<JEmployeeTimeoffRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ems.employee_timeoff</code> table reference
     */
    public JEmployeeTimeoff(String alias) {
        this(DSL.name(alias), EMPLOYEE_TIMEOFF);
    }

    /**
     * Create an aliased <code>ems.employee_timeoff</code> table reference
     */
    public JEmployeeTimeoff(Name alias) {
        this(alias, EMPLOYEE_TIMEOFF);
    }

    /**
     * Create a <code>ems.employee_timeoff</code> table reference
     */
    public JEmployeeTimeoff() {
        this(DSL.name("employee_timeoff"), null);
    }

    public <O extends Record> JEmployeeTimeoff(Table<O> path, ForeignKey<O, JEmployeeTimeoffRecord> childPath, InverseForeignKey<O, JEmployeeTimeoffRecord> parentPath) {
        super(path, childPath, parentPath, EMPLOYEE_TIMEOFF);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JEmployeeTimeoffPath extends JEmployeeTimeoff implements Path<JEmployeeTimeoffRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JEmployeeTimeoffPath(Table<O> path, ForeignKey<O, JEmployeeTimeoffRecord> childPath, InverseForeignKey<O, JEmployeeTimeoffRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JEmployeeTimeoffPath(Name alias, Table<JEmployeeTimeoffRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JEmployeeTimeoffPath as(String alias) {
            return new JEmployeeTimeoffPath(DSL.name(alias), this);
        }

        @Override
        public JEmployeeTimeoffPath as(Name alias) {
            return new JEmployeeTimeoffPath(alias, this);
        }

        @Override
        public JEmployeeTimeoffPath as(Table<?> alias) {
            return new JEmployeeTimeoffPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JEms.EMS;
    }

    @Override
    public UniqueKey<JEmployeeTimeoffRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_TIMEOFF_PKEY;
    }

    @Override
    public List<ForeignKey<JEmployeeTimeoffRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYEE_TIMEOFF__EMPLOYEE_TIMEOFF_CATEGORY_FKEY, Keys.EMPLOYEE_TIMEOFF__EMPLOYEE_TIMEOFF_EMPLOYEE_ID_FKEY);
    }

    private transient JTimeoffCategoryPath _timeoffCategory;

    /**
     * Get the implicit join path to the <code>ems.timeoff_category</code>
     * table.
     */
    public JTimeoffCategoryPath timeoffCategory() {
        if (_timeoffCategory == null)
            _timeoffCategory = new JTimeoffCategoryPath(this, Keys.EMPLOYEE_TIMEOFF__EMPLOYEE_TIMEOFF_CATEGORY_FKEY, null);

        return _timeoffCategory;
    }

    private transient JEmployeePath _employee;

    /**
     * Get the implicit join path to the <code>ems.employee</code> table.
     */
    public JEmployeePath employee() {
        if (_employee == null)
            _employee = new JEmployeePath(this, Keys.EMPLOYEE_TIMEOFF__EMPLOYEE_TIMEOFF_EMPLOYEE_ID_FKEY, null);

        return _employee;
    }

    @Override
    public JEmployeeTimeoff as(String alias) {
        return new JEmployeeTimeoff(DSL.name(alias), this);
    }

    @Override
    public JEmployeeTimeoff as(Name alias) {
        return new JEmployeeTimeoff(alias, this);
    }

    @Override
    public JEmployeeTimeoff as(Table<?> alias) {
        return new JEmployeeTimeoff(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JEmployeeTimeoff rename(String name) {
        return new JEmployeeTimeoff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JEmployeeTimeoff rename(Name name) {
        return new JEmployeeTimeoff(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JEmployeeTimeoff rename(Table<?> name) {
        return new JEmployeeTimeoff(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeTimeoff where(Condition condition) {
        return new JEmployeeTimeoff(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeTimeoff where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeTimeoff where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeTimeoff where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeTimeoff where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeTimeoff where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeTimeoff where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JEmployeeTimeoff where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeTimeoff whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JEmployeeTimeoff whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
